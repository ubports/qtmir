/*
 * AUTOGENERATED - DO NOT EDIT
 *
 * This file is generated from qt-windowmanager.xml
 * To regenerate, run the “refresh-wayland-wrapper” target.
 */

#ifndef MIR_FRONTEND_WAYLAND_QT_WINDOWMANAGER_XML_WRAPPER
#define MIR_FRONTEND_WAYLAND_QT_WINDOWMANAGER_XML_WRAPPER

#include <experimental/optional>

#include "mir/fd.h"
#include <wayland-server-core.h>

#include "mir/wayland/wayland_base.h"

namespace mir
{
namespace wayland
{

class Windowmanager;

class Windowmanager : public Resource
{
public:
    static char const constexpr* interface_name = "qt_windowmanager";

    static Windowmanager* from(struct wl_resource*);

    Windowmanager(struct wl_resource* resource, Version<1>);
    virtual ~Windowmanager() = default;

    void send_hints_event(int32_t show_is_fullscreen) const;
    void send_quit_event() const;

    void destroy_wayland_object() const;

    struct wl_client* const client;
    struct wl_resource* const resource;

    struct Opcode
    {
        static uint32_t const hints = 0;
        static uint32_t const quit = 1;
    };

    struct Thunks;

    static bool is_instance(wl_resource* resource);

    class Global : public wayland::Global
    {
    public:
        Global(wl_display* display, Version<1>);

        auto interface_name() const -> char const* override;

    private:
        virtual void bind(wl_resource* new_qt_windowmanager) = 0;
        friend Windowmanager::Thunks;
    };

private:
    virtual void open_url(uint32_t remaining, std::string const& url) = 0;
};

}
}

#endif // MIR_FRONTEND_WAYLAND_QT_WINDOWMANAGER_XML_WRAPPER
